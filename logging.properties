# The Level class defines seven levels of logging enlightenment :
# FINEST, FINER, FINE, CONFIG, INFO, WARNING, SEVERE
# ALL and OFF are defined values as well

# Properties file which configures the operation of the JDK 
# logging facility.

# The system will look for this config file, first using 
# a System property specified at startup: 
# 
# >java -Djava.util.logging.config.file=logging.properties 
# 
# If this property is not specified, then the config file is 
# retrieved from its default location at: 
# 
# JDK_HOME/jre/lib/logging.properties

# Global logging properties. 
# ------------------------------------------ 
# The set of handlers to be loaded upon startup. 
# Comma-separated list of class names. 
# (? LogManager docs say no comma here, but JDK example has comma.) 
handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level. 
# Loggers and Handlers may override this level 
.level=OFF

# Loggers 
# ------------------------------------------ 
# Loggers are usually attached to packages. 
# Here, the level for each package is specified. 
# The global level is used by default, so levels 
# specified here simply act as an override. 
whenchanged.level=ALL

# Handlers 
# -----------------------------------------

# --- ConsoleHandler --- 
# Override of global logging level 
java.util.logging.ConsoleHandler.level=CONFIG
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

# --- FileHandler --- 
# Override of global logging level 
java.util.logging.FileHandler.level=OFF

# Naming style for the output file: 
# (The output file is placed in the directory 
# defined by the "user.home" System property.) 
java.util.logging.FileHandler.pattern=%h/whenchanged%u.log

# Limiting size of output file in bytes: 
java.util.logging.FileHandler.limit=50000

# Number of output files to cycle through, by appending an 
# integer to the base file name: 
java.util.logging.FileHandler.count=1

# Style of output (Simple or XML): 
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter

# Format
# -----------------------------------------

#                       1     2       3       4      5        6
# String.format(format, date, source, logger, level, message, thrown);
# 12 + space + 1 + colon + space + 64 = 80
#java.util.logging.SimpleFormatter.format=%1$tH:%1$tM:%1$tS.%1$tL %4$.1s: %5$.64s%6$s%n

# date(HH:MM:SS.LLL) level(6 chars left aligned) message(unaltered, might be long) thrown(might be empty) newline
java.util.logging.SimpleFormatter.format=%1$tH:%1$tM:%1$tS.%1$tL %4$-6s %5$s%6$s%n

# date(HH:MM:SS.LLL) level(6 chars left aligned) message thrown(might be empty) newline gt source newline
#java.util.logging.SimpleFormatter.format=%1$tH:%1$tM:%1$tS.%1$tL %4$-6s %5$s%6$s%n> %2$s%n
